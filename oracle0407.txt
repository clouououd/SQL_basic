온라인 상의 스키마를 이용하려면
hr.employees처럼 앞에 hr.을 입력해줘야한다.
---------------------------------------------------

# hr.emplyees 테이블의 전체 내용 검색

SELECT * 
FROM hr.employees;
------------------------------------------------

# hr.employees 테이블의 특정 열의 내용 검색

SELECT employee_id, first_name, last_name
FROM hr.employees;
-------------------------------------------------

# 검색 내용을 emplyee_id를 기준으로 내림차순(DESC)으로 정렬
# 오름차순의 경우는 ASC;
# ASC/DESC 를 생략하면 오름차순으로 정렬

SELECT employee_id, first_name, last_name
FROM hr.employees;
ORDER BY employee_id DESC;
-------------------------------------------------------------------

# 중복 내용을 제외하고 검색

SELECT DISTINCT job_id
FROM hr.employees;

----------------------------------------------------------------------------

# 별칭 설정
# AS 생략이 가능하지만 넣는 것을 추천
# 한글은 안될 수도 있다.
# 출력창에 first_name 대신에 별칭이 나온다.

SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성
FROM hr.employees;
----------------------------------------------------------------------------

# || 열의 값들을 붙여서 검색
# 공백없이 붙는다

SELECT employee_id, first_name || last_name AS 성
FROM hr.employees;

# 열 값 사이에 공백 넣어서 합치기

SELECT employee_id, first_name || ' ' || last_name
FROM hr.employees;

# 열값에 문자열 합치기

SELECT employee_id, first_name || ' ' || last_name,
        email || '@' || 'company.com'
FROM hr.employees;
----------------------------------------------------------------------------

# 기본 열의 값을 계산하여 검색

SELECT employee_id, salary, salary+500, salary-100, (salary*1.1)/2
FROM hr.employees;

# 추가로 AS로 별칭 붙이기

SELECT employee_id AS 사원번호,
    salary AS 급여,
    salary+500 AS 추가급여,
    salary-100 AS 인하급여,
    (salary*1.1)/2 AS 조정급여
FROM hr.employees;
----------------------------------------------------------------------------

# employee_id값이 100인 행의 모든 내용을 검색

SELECT *
FROM hr.employees
WHERE employee_id = 100;

# 문자열의 데이터의 경우는 ''(작은 따옴표)를 붙인다
# 데이터 값의 경우는 대소문자를 구별한다

SELECT *
FROM hr.employees
WHERE first_name = 'David';

# 부등호

SELECT *
FROM hr.employees
WHERE employee_id >= 105;
--------------------------------------------

# salary의 값이 두 수 사이의 해당하는 값을 가진 행의 모든 내용을 검색
# 10000과 20000포함

SELECT *
FROM hr.employees
WHERE salary BETWEEN 10000 AND 20000;
--------------------------------------------------------

#특정항목에 해당값이 있는 항목들을 검색

SELECT *
FROM hr.employees
WHERE salary IN (10000, 17000, 24000);
--------------------------------------------------------

# LIKE 연산자
# 조회 조건 값이 명확하지 않을 때 사용
# % 몇글자가 오던 상관하지 않는다

SELECT *
FROM hr.employees
WHERE job_id LIKE 'AD%'

# _은 할 글자를 의미
# AD 뒤로 3글자가 오는 행의 모든 내용을 검색

SELECT *
FROM hr.employees
WHERE job_id LIKE 'AD___'
------------------------------------------

# IS NULL은 값이 빈 셀을 검색

SELECT *
FROM hr.employees
WHERE manager_id IS NULL;
----------------------------------------------

# 두개 조건을 동시 만족하는 값을 검색(AND)

SELECT *
FROM hr.employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

---------------------------------------------------
# salary는 4000이 반드시 넘고
# IT_PROG이거나 FI_ACCOUNT인 값을 가지는 행을 검색

SELECT *
FROM hr.employees
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR job_id = 'FI_ACCOUNT';
------------------------------------------

# <> 해당 값이 아닌 것을 검색

SELECT *
FROM hr.employees
WHERE employee_id <> 105;
----------------------------------------------

# null 값이 아닌 것을 검색

SELECT *
FROM hr.employees
WHERE manager_id IS NOT NULL;
-----------------------------------------------
[함수]
	- 단일 행 함수 : 한번에 하나씩 처리
	- 그룹 함수 : 동시에 처리

# LOWER 전부 소문자 / UPPER 전부 대문자 /  INITCAP 첫글자 대문자/

SELECT last_name,
    LOWER(last_name) LOWER적용,
    UPPER(last_name) UPPER적용,
    email,
    INITCAP(email) INITCAP적용
FROM hr.employees

# SUBSTR 슬라이싱
# 단 인덱스번호가 1에서 시작

SELECT job_id, SUBSTR(job_id, 1, 2) 적용결과
FROM hr.employees

# REPLACE(대상열, 찾을값, 바꿀값)
# 값을 찾아서 바꿔서 보여준다.

SELECT job_id, REPLACE(job_id, 'ACCOUNT', 'ACCNT') 적용결과
FROM hr.employees

# LPAD(대상열, 자리수, '채워질 문자')
# 자리수 크기의 문자열을 만들되 데이터의 값이 더작으면 왼쪽부터 채워질문자를 채워서 보여준다

SELECT first_name, LPAD(first_name, 12, '*') LPAD적용결과
FROM hr.employees

# RPAD(대상열, 자리수, '채워질 문자')
# 오른쪽부터

SELECT first_name, RPAD(first_name, 12, '*') LPAD적용결과
FROM hr.employees

# LTRIM(대상열, '지울 문자') / RTRIM(대상열, '지울 문자')
# 왼쪽/ 오른쪽 부터 찾아서 만나는 값을 삭제, 중간에 있는 값은 상관하지 않는다
# 주로 여백 삭제용으로 사용된다.

SELECT job_id, 
    LTRIM(job_id, 'F') LTRIM적용결과,
    LTRIM(job_id, 'T') RTRIM적용결과
FROM hr.employees

# TRIM('문자열') 
# 문자열의 여백을 지워줌, 문자열 사이의 여백은 상관없음
# dual 더미 테이블 : 테이블과 상관없이 하고 싶을때 사용, MYSQL과 Maria에는 없는 기능

SELECT 'start' || TRIM('    -space-    ') || 'end'
FROM dual;
---------------------------------------------------------------------

# ROUND(대상, 반올림할 자릿수)
# 반올림
# 소수점 윗부분은 마이너스

SELECT salary,
    salary/30 일급,
    ROUND(salary/30, 0) 적용결과0,
    ROUND(salary/30, 1) 적용결과1,
    ROUND(salary/30, -1) 적용결과MINUS1
FROM hr.employees;

# TRUNC(대상, 반올림할 자릿수)
# 버림

SELECT salary,
    salary/30 일급,
    TRUNC(salary/30, 0) 적용결과0,
    TRUNC(salary/30, 1) 적용결과1,
    TRUNC(salary/30, -1) 적용결과MINUS1
FROM hr.employees;